<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" 
	xmlns:context="http://www.springframework.org/schema/context"
	
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		
		http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		">

	<import resource="classpath:context-datasource.xml"/>
	
	<context:component-scan base-package="org.demo" />
	
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
		<property name="dataSource" ref="dataSource"></property>  
	</bean> 

	<!-- JobRepository and JobLauncher are configuration/setup classes -->
	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />

	<bean id="jobLauncher" 	class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<!-- Step will need a transaction manager -->
	<bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

	<!-- ======================================================== -->
	
	<!-- JOB DEFINITION -->
	<batch:job id="job1">
		<batch:step id="step1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk 
					reader="step1Reader" 
					writer="step1Writer"
					processor="step1Processor" 
					commit-interval="10" /> <!-- Lot de 10 -->
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="job1Listener" />
		</batch:listeners>
	</batch:job>

	<!-- JOB CLASSES -->
	
	<!-- Optional JobExecutionListener to perform business logic before and after the job -->
	<bean id="job1Listener" class="org.demo.batch.job1.Job1Listener" />

	<!-- STEP1 CLASSES -->
	
	<!-- ItemReader ( reads data from XML file ) -->
	<bean id="step1Reader" class="org.springframework.batch.item.xml.StaxEventItemReader">

		<property name="resource" value="classpath:examResult.xml" /> <!-- Input File -->

		<property name="fragmentRootElementName" value="ExamResult" />

		<property name="unmarshaller">
			<bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
				<property name="classesToBeBound">
					<list>
						<value>org.demo.batch.job1.model.Exam</value>
					</list>
				</property>
			</bean>
		</property>
	</bean>

	<!-- ItemProcessor ( performs business logic/filtering on the input records )  -->
	<bean id="step1Processor" class="org.demo.batch.job1.step1.ExamItemProcessor" />

	<!-- ItemWriter ( writes data to database ) : Spring Component + specific ItemPreparedStatementSetter -->
  	<bean id="step1Writer" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
		  	<value>
	            <![CDATA[        
	            	insert into EXAM_RESULT(STUDENT_NAME, DOB, PERCENTAGE) 
					values (?, ?, ?)
	            ]]>
		  	</value>
		</property>

		<!-- Custom setter to handle the conversion between Jodatime LocalDate to SQL DATE -->
		<property name="ItemPreparedStatementSetter">
			<bean class="org.demo.batch.job1.step1.ExamItemPreparedStatementSetter" />
		</property>
 </bean>

</beans>			